// Instalar loading

expo install expo-app-loading

// Install fetchFonts

expo install expo-font

// using loading
import AppLoading from 'expo-app-loading';
// add the prop
onError={(err) => console.log(err)}
//
<AppLoading
    startAsync={fetchFonts}
    onFinish={() => setFontLoaded(true)}
    onError={(err) => console.log(err)}
/>

// React Navigation 
Para este proyecto utilizo React Navigation 4

npm install react-navigation

expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view

npm install react-navigation-stack
import { createStackNavigator } from 'react-navigation-stack';

npm install react-navigation-tabs
import { createBottomTabNavigator } from 'react-navigation-tabs';

npm install react-navigation-drawer
import { createDrawerNavigator } from 'react-navigation-drawer';

116 // StackNavigator
se maneja en un stack of pages y la que se visualiza es la que esta en el tope del stack
Es necesario crear Navigators que contiene la configuracion de la navegacion
Para exportarlo se lo envuelve en createAppContainer
por defecto al usar StackNavigator se encarga de manejar los knoch de los telefonos

117 Para navegar se hace uso de navigation y el metodo navigate

121 en casos en que se requiera redirigir atras (ej boton de Guardar)
navigation.goBack() 
navigation.pop()

Si se quiere volver al componente padre
navigation.popToTop()

Si no quiero añadir al stack y en vez quiero reemplazar la pantalla actual con este otro (para login)
navigation.replace('name')

122 usando Flatlist para renderizar Grids
keyExtractor={(item, index) => item.id} se lo utiliza para extraer la key si ya tiene id o key entonces no es necesario

123 Agregando titulo a CategoriesScreen

como el componentes es una funcion y en si las funciones son objetos en javascript se puede añadir propiedades
CategoriesScreen.navigationOptions = {
    headerTitle: 'Categorías de Comida',
    headerStyle: {
        backgroundColor: Colors.primaryColor,
    },
    headerTintColor: 'white'
}

124 Pasar datos por params

125 navigationOptions tambien puede ser una 
funcion para configuraciones dinamicas en que cambian datos en este caso Nombre Categorias
CategoryMealScreen.navigationOptions = navigationData => {
    const catId = navigationData.navigation.getParam('categoryId')

    const selectedCategory = CATEGORIES.find(cat => cat.id === catId)

    return {
        headerTitle: selectedCategory.title,
        headerStyle: {
            backgroundColor: Colors.primaryColor,
        },
        headerTintColor: 'white'
    }
}

126 Agregando navigationOptions a MeealsNavigation para no repetir codigo
agregando el segundo argumento a createStackNavigator llamado defaultNavigationOptions opciones que se aplican a cada screen
las especificaciones propias del componente osea añadidas con navigationOptions tienen mas relevancia 
que las defaultNavigationOption
defaultNavigationOptions: {
        headerStyle: {
            backgroundColor: Colors.primaryColor,
        },
        headerTintColor: 'white'

Tambien se utiliza react-native-screens para asegurar que la navegacion este optimizada al 
utilizar lo nativo es decir Fragments para Android y UI view Controller en IOS

import { enableScreens } from 'react-native-screens'
enableScreens()

128 Datos de las comidas

129 Desplegando comidas de una categoria
MEALS.filter(meal => meal.categoryIds.indexOf(catId) >= 0   --------> da -1 si no hay

131 Pasando Datos a Meal Detail Screen

132 Para agregar iconos en el header instalo
yarn add react-navigation-header-buttons
yarn add @expo/vector-icons
creo componente HeaderButton e importo
import {Ionicons}  from '@expo/vector-icons'
import { Ionicons }  from '@expo/vector-icons'

<HeaderButton 
                {...props} 
                IconComponent={Ionicons} 
                iconSize={22} 
                color={Colors.primaryColor}
            />

En el componente que se va a utilizar se importa
import { HeaderButtons, Item } from 'react-navigation-header-buttons'
import HeaderButton from '../components/HeaderButton'
headerRight: () => (
        <           HeaderButtons HeaderButtonComponent={HeaderButton}> 
                        <Item 
                            title='Favorito' 
                            iconName='ios-star' 
                            onPress={ () => {
                                console.log("Favorito")
                            }} 
                        /> 
                    </HeaderButtons>
                )

134 Navegacion por Tabs importo en MealsNavigation.js
import { createBottomTabNavigator } from 'react-navigation-tabs'
puedo usar MealsNavigator como tab es decir  toda la ruta que ya implemente antes se puede añadir como tab queda asi

const MealsFavTabNavigator =  createBottomTabNavigator({
    Meals: MealsNavigator,
    Favorites: FavoritesScreen
})

export default createAppContainer(MealsFavTabNavigator)

135 Añadir Iconos y Dar estilos a la navigackion por Tabs
createBottomTabNavigator tambien puede tomar otro argumento para la configuracion del mismo
se puede añadir tabBarOptions para los estilos

para iconos se utiliza tabBarIcon y queda asi se hace uso de tabInfo.tintColor porque ya se lo definio abajo

tabBarIcon: (tabInfo) => {
            return <Ionicons 
                name='ios-restaurant' 
                size={25}
                color={tabInfo.tintColor} />

al final queda asi

const MealsFavTabNavigator =  createBottomTabNavigator({
    Meals: { screen: MealsNavigator, navigationOptions: {
        tabBarLabel: 'Categorías',
        tabBarIcon: (tabInfo) => {
            return (
                <Ionicons 
                    name='ios-restaurant' 
                    size={25}
                    color={tabInfo.tintColor} />
                )
        }
    }},
    Favorites: {screen: FavoritesScreen, navigationOptions:{
        tabBarLabel: 'Favoritos',
        tabBarIcon: (tabInfo) => {
            return (
                <Ionicons 
                    name='ios-star' 
                    size={25}
                    color={tabInfo.tintColor} />
                )
        }
    }}
}, {
    tabBarOptions: {
        activeTintColor: Colors.secondaryColor
    }
})


The navigationOptions you set on the navigator will NOT be used in its screens! That's the difference to defaultNavigationOptions - those option WILL be merged with the screens.

137 Mejorar Estilos de Tab Navigation en Android, instalo 
yarn add react-navigation-material-bottom-tabs
yarn add react-native-paper

import { createMaterialBottomTabNavigator } from 'react-navigation-material-bottom-tabs'


138 Separando lista en componente propio

139 Agregando un SideDraw Navegacion se importa importar 
import { createDrawerNavigator } from 'react-navigation-drawer'

En MealsNavigation se cambia la navegacion principal

const MainNavigator = createDrawerNavigator({
    Tabs: MealsFavTabNavigator,
    Filters: FilterNavigator

})

para que se abra y cierre automaticamente se debe añadir
FilterScreen.navigationOptions = (navData) => {
    return {
        headerTitle: 'Filtros',
        headerLeft: () => (
            <HeaderButtons HeaderButtonComponent={HeaderButton}>
                <Item 
                    title="Menú" 
                    iconName='ios-menu' 
                    onPress={() => {
                    navData.navigation.toggleDrawer()
                    }} />
            </HeaderButtons>
        )

    }
}

141 Aplicando estilos a los textos

144 Utilizando Switch

145 Pasar Datos en FilterScreen pasar datos del componente a navigationOptions
se utiliza params, para establecer los parametros

const saveFilters = () => {
        const appliedFilters = {
            glutenFree: isGlutenFree,
            vegetarian: isVegetarian,
            vegan: isVegan,
            lactoseFree: isLactose
        }

        console.log(appliedFilters)
    }

    useEffect( () => {
        // update the params values for the currently loaded screen
        navigation.setParams({
            save: saveFilters
        })
    }, [saveFilters, navigation])

para usarlos

    navData.navigation.getParam('save')()

PARA ASEGURARSE QUE saveFilters solo se actualiza cuando el estado cambia se hace uso de useCallback
permite envolver a una funcion y que sea cacheada por React y solamente se la recrea si sus dependencias cambian

      const saveFilters = useCallback( () => {
        const appliedFilters = {
            glutenFree: isGlutenFree,
            vegetarian: isVegetarian,
            vegan: isVegan,
            lactoseFree: isLactose
        }

        console.log(appliedFilters)
    }, [isGlutenFree, isVegetarian, isVegan, isLactose])


151 CONFIGURACION DE REDUX

 - yarn add react react-redux
 - creo carpeta store para la configuracion
 - dentro de store creo carpeta actions y reducers

 - dentro de reducers creo meals.js donde estara la logica de actualizar el state

 import { MEALS } from '../../data/dummy-data'

const initialState = {
    meals: MEALS,
    filteredMeals: MEALS,
    favoriteMeals: []
}


const mealsReducer = (state = initialState, action) => {
    return state
}

export default mealsReducer

- En App.js importo

import { createStore, combineReducers } from 'redux'
import { Provider } from 'react-redux'

import MealsNavigator from './navigation/MealsNavigation'

const rootReducer = combineReducers({
  meals: mealsReducer
})

const store = createStore(rootReducer)

<Provider store={store}>
    <MealsNavigator />
</Provider>


152 Seleccionando pedazos del State
en CategoryMealsScreen me deshago de MEALS que contenia todas las comidas y utilizo el state global
utilizo el hook useSelector porque se puede utilizar en componentes funcionales otra alternativa es usar connect, envolver la exportacion con ello y utilizar mapStateToProps y mapDispatchToProps

import { useSelector } from 'react-redux'

const availableMeals = useSelector( state => state.meals.filteredMeals )

153 Pasando datos del componente anterior a Navigation Options o usando Redux y useEffect

- se puede resolver con params lo que se le pase a la funcion se va a unir con los otros parametros ya existentes no se sobreescribe
useEffect( () => {
        navigation.setParams({ mealTitle: selectedMeal.title})
    },[selectedMeal])

y en navigationOptions
const mealTitle = navigationData.navigation.getParam('mealTitle')

- pasar los datos del componente anterior es decir si vengo de CategoryMealsScreen o de FavoritesScreen paso el titulo a MealDetailScreen
como en los dos se utiliza MealList simplemente agrego unnuevo campo mealTitle queda asi

154 Despachar Actions y Logica del Reducer

creo un nuevo archivo dentro de actions
las constantes de las define con mayusculas
export const TOGGLE_FAVORITE = 'TOGGLE_FAVORITE'

en el caso que la action requiera un payload por eso se lo define como objeto

export const taggleFavorite = (id) => {
    return {
        type: TOGGLE_FAVORITE, mealId: id
    }
}

ahora se lo utiliza en el reducer utilizando sentencia switch - nota default de switch se lo busca cuando la apicacion comienza y redux store es inicializado
queda asi 

switch (action.type) {
        case TOGGLE_FAVORITE:
            const existingIndex = state.favoriteMeals.findIndex( meal => meal.id === action.mealId) // retorna -1 no esta
            if (existingIndex >= 0 ){
                //si entra aqui hay que quitarlo la comida del array
                const updatedFavMeals = [...state.favoriteMeals] // importante crear copia del array
                updatedFavMeals.splice(existingIndex, 1)
                return {
                    ...state,
                    favoriteMeals: updatedFavMeals
                }
            }else{
                const meal = state.meals.find(meal => meal.id === action.mealId)
                return{
                    ...state,
                    favoriteMeals: state.favoriteMeals.concat(meal) //concat añade un elemento y retorna un nuevo array
                }
            }
        default:
            return;

- Ahora para despachar la action para que se ejecute la logica del reducer
se debe ejecutar al presionar la estrella

SE HACE USO DE useDispatch
import { useSelector, useDispatch } from 'react-redux'

como el botton de estrella esta en NavigationOptions y los hooks solo se pueden usuar en componentes funcionales u otros hooks va a tocar pasarle por params

entonces primero saber que para despachar necesitamos la action a despachar por lo que se debe importar y tambien se utiliza useCallback

 const dispatch = useDispatch()
    const toggleFavoriteHandler = useCallback(() => {
        dispatch(toggleFavorite(mealId))
    }, [dispatch, mealId])

    useEffect( () => {
        navigation.setParams({toggleFav: toggleFavoriteHandler})
    }, [toggleFavoriteHandler])

155 Cambiar estrella si es comida favorita o no

denuevo en componente MealList devo pasarlo por params para que se pase de una igual uso useSelector

 const favoriteMeals = useSelector(state => state.meals.favoriteMeals)

 const isFavorite = favoriteMeals.some(meal => meal.id === itemData.item.id)

 params: {
                            mealId: itemData.item.id,
                            mealTitle: itemData.item.title,
                           