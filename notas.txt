// Instalar loading

expo install expo-app-loading

// Install fetchFonts

expo install expo-font

// using loading
import AppLoading from 'expo-app-loading';
// add the prop
onError={(err) => console.log(err)}
//
<AppLoading
    startAsync={fetchFonts}
    onFinish={() => setFontLoaded(true)}
    onError={(err) => console.log(err)}
/>

// React Navigation 
Para este proyecto utilizo React Navigation 4

npm install react-navigation

expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view

npm install react-navigation-stack
import { createStackNavigator } from 'react-navigation-stack';

npm install react-navigation-tabs
import { createBottomTabNavigator } from 'react-navigation-tabs';

npm install react-navigation-drawer
import { createDrawerNavigator } from 'react-navigation-drawer';

116 // StackNavigator
se maneja en un stack of pages y la que se visualiza es la que esta en el tope del stack
Es necesario crear Navigators que contiene la configuracion de la navegacion
Para exportarlo se lo envuelve en createAppContainer
por defecto al usar StackNavigator se encarga de manejar los knoch de los telefonos

117 Para navegar se hace uso de navigation y el metodo navigate

121 en casos en que se requiera redirigir atras (ej boton de Guardar)
navigation.goBack() 
navigation.pop()

Si se quiere volver al componente padre
navigation.popToTop()

Si no quiero añadir al stack y en vez quiero reemplazar la pantalla actual con este otro (para login)
navigation.replace('name')

122 usando Flatlist para renderizar Grids
keyExtractor={(item, index) => item.id} se lo utiliza para extraer la key si ya tiene id o key entonces no es necesario

123 Agregando titulo a CategoriesScreen

como el componentes es una funcion y en si las funciones son objetos en javascript se puede añadir propiedades
CategoriesScreen.navigationOptions = {
    headerTitle: 'Categorías de Comida',
    headerStyle: {
        backgroundColor: Colors.primaryColor,
    },
    headerTintColor: 'white'
}

124 Pasar datos por params

125 navigationOptions tambien puede ser una 
funcion para configuraciones dinamicas en que cambian datos en este caso Nombre Categorias
CategoryMealScreen.navigationOptions = navigationData => {
    const catId = navigationData.navigation.getParam('categoryId')

    const selectedCategory = CATEGORIES.find(cat => cat.id === catId)

    return {
        headerTitle: selectedCategory.title,
        headerStyle: {
            backgroundColor: Colors.primaryColor,
        },
        headerTintColor: 'white'
    }
}

126 Agregando navigationOptions a MeealsNavigation para no repetir codigo
agregando el segundo argumento a createStackNavigator llamado defaultNavigationOptions opciones que se aplican a cada screen
las especificaciones propias del componente osea añadidas con navigationOptions tienen mas relevancia 
que las defaultNavigationOption
defaultNavigationOptions: {
        headerStyle: {
            backgroundColor: Colors.primaryColor,
        },
        headerTintColor: 'white'

Tambien se utiliza react-native-screens para asegurar que la navegacion este optimizada al 
utilizar lo nativo es decir Fragments para Android y UI view Controller en IOS

import { enableScreens } from 'react-native-screens'
enableScreens()

128 Datos de las comidas

129 Desplegando comidas de una categoria
MEALS.filter(meal => meal.categoryIds.indexOf(catId) >= 0   --------> da -1 si no hay

131 Pasando Datos a Meal Detail Screen

132 Para agregar iconos en el header instalo
yarn add react-navigation-header-buttons
yarn add @expo/vector-icons
creo componente HeaderButton e importo
import {Ionicons}  from '@expo/vector-icons'
import { Ionicons }  from '@expo/vector-icons'

<HeaderButton 
                {...props} 
                IconComponent={Ionicons} 
                iconSize={22} 
                color={Colors.primaryColor}
            />

En el componente que se va a utilizar se importa
import { HeaderButtons, Item } from 'react-navigation-header-buttons'
import HeaderButton from '../components/HeaderButton'
headerRight: () => (
        <           HeaderButtons HeaderButtonComponent={HeaderButton}> 
                        <Item 
                            title='Favorito' 
                            iconName='ios-star' 
                            onPress={ () => {
                                console.log("Favorito")
                            }} 
                        /> 
                    </HeaderButtons>
                )